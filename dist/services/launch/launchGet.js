"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readListLansman = readListLansman;
exports.readLaunch = readLaunch;
exports.readAllData = readAllData;
const mongoose_1 = __importDefault(require("mongoose"));
const main_schema_1 = require("../../models/main_schema");
const dotenv_1 = __importDefault(require("dotenv"));
const path_1 = __importDefault(require("path"));
const envPath = path_1.default.resolve(__dirname, '../../.env');
dotenv_1.default.config({ path: envPath });
const uri = process.env.MONGO_URI || '';
async function connectToDatabase() {
    if (mongoose_1.default.connection.readyState === 0) {
        try {
            await mongoose_1.default.connect(uri);
            console.log("Connected to MongoDB");
        }
        catch (err) {
            console.error("MongoDB connection error:", err);
            throw err;
        }
    }
}
function transformResponse(data) {
    return data.map(item => ({
        id: item._id, // <-- Create new id generated by launch counter
        launchName: item.LaunchFormData.launchName,
        companyName: item.LaunchFormData.companyName,
        language: item.LaunchFormData.language,
        isActive: item.LaunchFormData.isActive,
        startDate: item.LaunchFormData.startDate,
        endDate: item.LaunchFormData.endDate,
    }));
}
async function readListLansman() {
    try {
        await connectToDatabase();
        const posts = await main_schema_1.Main.find({}, 'LaunchFormData.launchName LaunchFormData.companyName LaunchFormData.language LaunchFormData.startDate LaunchFormData.endDate LaunchFormData.isActive');
        return transformResponse(posts);
    }
    catch (err) {
        console.error("Error reading posts:", err);
        throw err;
    }
    finally {
        mongoose_1.default.connection.close();
    }
}
async function readLaunch(id) {
    try {
        await connectToDatabase();
        const post = await main_schema_1.Main.findById(id);
        if (!post) {
            throw new Error("Post not found");
        }
        return post;
    }
    catch (err) {
        console.error("Error reading post:", err);
        throw err;
    }
    finally {
        mongoose_1.default.connection.close();
    }
}
async function readAllData() {
    try {
        await connectToDatabase();
        const mains = await main_schema_1.Main.find({});
        return mains;
    }
    catch (err) {
        console.error("Error reading Mains:", err);
        throw err;
    }
    finally {
        mongoose_1.default.connection.close();
    }
}
