import mongoose from 'mongoose';
import { IMain, Main } from '../../models/main_schema';
import { connectToDatabase } from './dbClient';

interface ILaunchInfo {
    launchName: string;
    companyName: string;
    language: string;
    startDate: string;
    endDate: string;
    isActive: boolean;
    id: string;
}

function transformResponse(data: any[]): ILaunchInfo[] {
    return data.map(item => ({
        id: item._id,  // <-- Create new id generated by launch counter
        launchName: item.LaunchFormData.launchName,
        companyName: item.LaunchFormData.companyName,
        language: item.LaunchFormData.language,
        isActive: item.LaunchFormData.isActive,
        startDate: item.LaunchFormData.startDate,
        endDate: item.LaunchFormData.endDate,
    }));
}


async function readListLansman(): Promise<ILaunchInfo[]> {
    try {
        await connectToDatabase();
        const posts = await Main.find({}, 'LaunchFormData.launchName LaunchFormData.companyName LaunchFormData.language LaunchFormData.startDate LaunchFormData.endDate LaunchFormData.isActive');
        return transformResponse(posts);
    } catch (err) {
        throw `Error reading posts: ${err}`;
    }
}

async function readLaunch(id: string): Promise<IMain> {
    try {
        await connectToDatabase();
        const post = await Main.findById(id);
        if (!post) {
            throw new Error("Post not found");
        }
        return post;
    } catch (err) {
        throw `Error reading post: ${err}`;
    }
}

async function readAllData(): Promise<IMain[]> {
    try {
        await connectToDatabase();
        const mains = await Main.find({});
        return mains;
    } catch (err) {
        throw `Error reading posts: ${err}`;
    }
}

export { readListLansman, readLaunch, readAllData };